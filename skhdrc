#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# open terminal, blazingly fast compared to iTerm/Hyper
# cmd - return : /Applications/Kitty.app/Contents/MacOS/kitty --single-instance -d ~

# # open qutebrowser
# cmd + shift - return : ~/Scripts/qtb.sh

# # open mpv
# cmd - m : open -na /Applications/mpv.app $(pbpaste)

# # close focused window
# alt - w : chunkc tiling::window --close

# # focus window
# alt - h : chunkc tiling::window --focus west
# alt - j : chunkc tiling::window --focus south
# alt - k : chunkc tiling::window --focus north
# alt - l : chunkc tiling::window --focus east

# cmd - j : chunkc tiling::window --focus prev
# cmd - k : chunkc tiling::window --focus next

# # equalize size of windows
# shift + alt - 0 : chunkc tiling::desktop --equalize

# # swap window
# shift + alt - h : chunkc tiling::window --swap west
# shift + alt - j : chunkc tiling::window --swap south
# shift + alt - k : chunkc tiling::window --swap north
# shift + alt - l : chunkc tiling::window --swap east

# # move window
# shift + cmd - h : chunkc tiling::window --warp west
# shift + cmd - j : chunkc tiling::window --warp south
# shift + cmd - k : chunkc tiling::window --warp north
# shift + cmd - l : chunkc tiling::window --warp east

# # make floating window fill screen
# shift + alt - up     : chunkc tiling::window --grid-layout 1:1:0:0:1:1

# # make floating window fill left-half of screen
# shift + alt - left   : chunkc tiling::window --grid-layout 1:2:0:0:1:1

# # make floating window fill right-half of screen
# shift + alt - right  : chunkc tiling::window --grid-layout 1:2:1:0:1:1

# # create desktop, move window and follow focus
# shift + cmd - n : chunkc tiling::desktop --create;\
#                   id=$(chunkc tiling::query --desktops-for-monitor $(chunkc tiling::query --monitor-for-desktop $(chunkc tiling::query --desktop id)));\
#                   chunkc tiling::window --send-to-desktop $(echo ${id##* });\
#                   chunkc tiling::desktop --focus $(echo ${id##* })

# # create desktop and follow focus
# cmd + alt - n : chunkc tiling::desktop --create;\
#                 id=$(chunkc tiling::query --desktops-for-monitor $(chunkc tiling::query --monitor-for-desktop $(chunkc tiling::query --desktop id)));\
#                 chunkc tiling::desktop --focus $(echo ${id##* })
# # destroy desktop
# cmd + alt - w : chunkc tiling::desktop --annihilate

# # fast focus desktop
# cmd + alt - x : chunkc tiling::desktop --focus $(chunkc get _last_active_desktop)
# cmd + alt - z : chunkc tiling::desktop --focus prev
# cmd + alt - c : chunkc tiling::desktop --focus next
# cmd + alt - 1 : chunkc tiling::desktop --focus 1
# cmd + alt - 2 : chunkc tiling::desktop --focus 2
# cmd + alt - 3 : chunkc tiling::desktop --focus 3
# cmd + alt - 4 : chunkc tiling::desktop --focus 4
# cmd + alt - 5 : chunkc tiling::desktop --focus 5
# cmd + alt - 6 : chunkc tiling::desktop --focus 6
# cmd + alt - 7 : chunkc tiling::desktop --focus 7
# cmd + alt - 8 : chunkc tiling::desktop --focus 8
# cmd + alt - 9 : chunkc tiling::desktop --focus 9
# cmd + alt - 0 : chunkc tiling::desktop --focus 10

# # send window to desktop and follow focus
# shift + cmd - x : chunkc tiling::window --send-to-desktop $(chunkc get _last_active_desktop); chunkc tiling::desktop --focus $(chunkc get _last_active_desktop)
# shift + cmd - z : chunkc tiling::window --send-to-desktop prev; chunkc tiling::desktop --focus prev
# shift + cmd - c : chunkc tiling::window --send-to-desktop next; chunkc tiling::desktop --focus next
# shift + cmd - 1 : chunkc tiling::window --send-to-desktop 1; chunkc tiling::desktop --focus 1
# shift + cmd - 2 : chunkc tiling::window --send-to-desktop 2; chunkc tiling::desktop --focus 2
# shift + cmd - 3 : chunkc tiling::window --send-to-desktop 3; chunkc tiling::desktop --focus 3
# shift + cmd - 4 : chunkc tiling::window --send-to-desktop 4; chunkc tiling::desktop --focus 4
# shift + cmd - 5 : chunkc tiling::window --send-to-desktop 5; chunkc tiling::desktop --focus 5
# shift + cmd - 6 : chunkc tiling::window --send-to-desktop 6; chunkc tiling::desktop --focus 6
# shift + cmd - 7 : chunkc tiling::window --send-to-desktop 7; chunkc tiling::desktop --focus 7
# shift + cmd - 8 : chunkc tiling::window --send-to-desktop 8; chunkc tiling::desktop --focus 8
# shift + cmd - 9 : chunkc tiling::window --send-to-desktop 9; chunkc tiling::desktop --focus 9
# shift + cmd - 0 : chunkc tiling::window --send-to-desktop 10; chunkc tiling::desktop --focus 10

# # focus monitor
# ctrl + alt - z  : chunkc tiling::monitor -f prev
# ctrl + alt - c  : chunkc tiling::monitor -f next
# ctrl + alt - 1  : chunkc tiling::monitor -f 1
# ctrl + alt - 2  : chunkc tiling::monitor -f 2
# ctrl + alt - 3  : chunkc tiling::monitor -f 3

# # send window to monitor and follow focus
# ctrl + cmd - z  : chunkc tiling::window --send-to-monitor prev; chunkc tiling::monitor -f prev
# ctrl + cmd - c  : chunkc tiling::window --send-to-monitor next; chunkc tiling::monitor -f next
# ctrl + cmd - 1  : chunkc tiling::window --send-to-monitor 1; chunkc tiling::monitor -f 1
# ctrl + cmd - 2  : chunkc tiling::window --send-to-monitor 2; chunkc tiling::monitor -f 2
# ctrl + cmd - 3  : chunkc tiling::window --send-to-monitor 3; chunkc tiling::monitor -f 3

# # increase region size
# shift + alt - a : chunkc tiling::window --use-temporary-ratio 0.1 --adjust-window-edge west
# shift + alt - s : chunkc tiling::window --use-temporary-ratio 0.1 --adjust-window-edge south
# shift + alt - w : chunkc tiling::window --use-temporary-ratio 0.1 --adjust-window-edge north
# shift + alt - d : chunkc tiling::window --use-temporary-ratio 0.1 --adjust-window-edge east

# # decrease region size
# shift + cmd - a : chunkc tiling::window --use-temporary-ratio -0.1 --adjust-window-edge west
# shift + cmd - s : chunkc tiling::window --use-temporary-ratio -0.1 --adjust-window-edge south
# shift + cmd - w : chunkc tiling::window --use-temporary-ratio -0.1 --adjust-window-edge north
# shift + cmd - d : chunkc tiling::window --use-temporary-ratio -0.1 --adjust-window-edge east

# # set insertion point for focused container
# ctrl + alt - f : chunkc tiling::window --use-insertion-point cancel
# ctrl + alt - h : chunkc tiling::window --use-insertion-point west
# ctrl + alt - j : chunkc tiling::window --use-insertion-point south
# ctrl + alt - k : chunkc tiling::window --use-insertion-point north
# ctrl + alt - l : chunkc tiling::window --use-insertion-point east

# # rotate tree
# alt - r : chunkc tiling::desktop --rotate 90

# # mirror tree y-axis
# alt - y : chunkc tiling::desktop --mirror vertical

# # mirror tree x-axis
# alt - x : chunkc tiling::desktop --mirror horizontal

# # toggle desktop offset
# alt - a : chunkc tiling::desktop --toggle offset

# # toggle window fullscreen
# alt - f : chunkc tiling::window --toggle fullscreen

# # toggle window native fullscreen
# shift + alt - f : chunkc tiling::window --toggle native-fullscreen

# # toggle window parent zoom
# alt - d : chunkc tiling::window --toggle parent

# # toggle window split type
# alt - e : chunkc tiling::window --toggle split

# # toggle window fade
# alt - q : chunkc tiling::window --toggle fade

# # float / unfloat window and center on screen
# alt - t : chunkc tiling::window --toggle float;\
#           chunkc tiling::window --grid-layout 4:4:1:1:2:2

# # toggle sticky
# alt - s : chunkc tiling::window --toggle sticky

# # toggle sticky, float and resize to picture-in-picture size
# alt - p : chunkc tiling::window --toggle sticky;\
#           chunkc tiling::window --grid-layout 5:5:4:0:1:1

# # float next window to be tiled
# shift + alt - t : chunkc set window_float_next 1

# # change layout of desktop
# ctrl + alt - a : chunkc tiling::desktop --layout bsp
# ctrl + alt - s : chunkc tiling::desktop --layout monocle
# ctrl + alt - d : chunkc tiling::desktop --layout float

# ctrl + alt - w : chunkc tiling::desktop --deserialize ~/.chunkwm_layouts/dev_1

# ----------------------------------------------------------
# Launchers
# ----------------------------------------------------------
hyper - return : open -na "Kitty" --args --single-instance -d ~
hyper - f      : open ~

# ----------------------------------------------------------
# i3-style window focus
# ----------------------------------------------------------

# Focus next window
# shift + alt - j       : ~/.config/sketchybar/plugins/focus_window.sh next
# shift + alt - 0x2F    : ~/.config/sketchybar/plugins/focus_window.sh next   # .  (kVK_ANSI_Period)
# shift + alt - 0x27    : ~/.config/sketchybar/plugins/focus_window.sh next   # '  (kVK_ANSI_Quote)
hyper       - 0x27    : ~/.config/sketchybar/plugins/focus_window.sh next
alt         - tab     : ~/.config/sketchybar/plugins/focus_window.sh next

# Focus previous window
# shift + alt - k       : ~/.config/sketchybar/plugins/focus_window.sh prev
# shift + alt - 0x2B    : ~/.config/sketchybar/plugins/focus_window.sh prev   # ,  (kVK_ANSI_Comma)
# shift + alt - 0x29    : ~/.config/sketchybar/plugins/focus_window.sh prev   # ;  (kVK_ANSI_Semicolon)
hyper       - 0x29    : ~/.config/sketchybar/plugins/focus_window.sh prev
alt         - 0x32    : ~/.config/sketchybar/plugins/focus_window.sh prev   # `  (kVK_ANSI_Grave)

# Focus specific window slots shown in SketchyBar
hyper - 1 : ~/.config/sketchybar/plugins/focus_window.sh 1
hyper - 2 : ~/.config/sketchybar/plugins/focus_window.sh 2
hyper - 3 : ~/.config/sketchybar/plugins/focus_window.sh 3
hyper - 4 : ~/.config/sketchybar/plugins/focus_window.sh 4
hyper - 5 : ~/.config/sketchybar/plugins/focus_window.sh 5
hyper - 6 : ~/.config/sketchybar/plugins/focus_window.sh 6
hyper - 7 : ~/.config/sketchybar/plugins/focus_window.sh 7
hyper - 8 : ~/.config/sketchybar/plugins/focus_window.sh 8
hyper - 9 : ~/.config/sketchybar/plugins/focus_window.sh 9
hyper - 0 : ~/.config/sketchybar/plugins/focus_window.sh 10

# ----------------------------------------------------------
# Move focused window to numbered spaces via Mission Control shortcuts
# ----------------------------------------------------------
shift + alt - 1 : ~/.config/skhd/.venv/bin/python ~/.config/skhd/move_window.py 1 18
shift + alt - 2 : ~/.config/skhd/.venv/bin/python ~/.config/skhd/move_window.py 2 19
shift + alt - 3 : ~/.config/skhd/.venv/bin/python ~/.config/skhd/move_window.py 3 20
shift + alt - 4 : ~/.config/skhd/.venv/bin/python ~/.config/skhd/move_window.py 4 21
shift + alt - 5 : ~/.config/skhd/.venv/bin/python ~/.config/skhd/move_window.py 5 23
shift + alt - 6 : ~/.config/skhd/.venv/bin/python ~/.config/skhd/move_window.py 6 22
shift + alt - 7 : ~/.config/skhd/.venv/bin/python ~/.config/skhd/move_window.py 7 26
shift + alt - 8 : ~/.config/skhd/.venv/bin/python ~/.config/skhd/move_window.py 8 28
shift + alt - 9 : ~/.config/skhd/.venv/bin/python ~/.config/skhd/move_window.py 9 25
shift + alt - 0 : ~/.config/skhd/.venv/bin/python ~/.config/skhd/move_window.py 10 29

# ----------------------------------------------------------
# Reorder windows within current space
# ----------------------------------------------------------
shift + alt - 0x29 : ~/.config/skhd/reorder_window.sh prev   # ;  (kVK_ANSI_Semicolon)
shift + alt - 0x27 : ~/.config/skhd/reorder_window.sh next   # '  (kVK_ANSI_Quote)

# ----------------------------------------------------------
# Utility shortcuts
# ----------------------------------------------------------
hyper - 0x2A : ~/.config/sketchybar/plugins/sync_window_order.sh   # \ (kVK_ANSI_Backslash)

# ----------------------------------------------------------
# Layout switching
# ----------------------------------------------------------
shift + alt - e : index=$(yabai -m query --spaces --space | jq '.index'); yabai -m config --space ${index} layout bsp
shift + alt - w : index=$(yabai -m query --spaces --space | jq '.index'); yabai -m config --space ${index} layout stack
shift + alt - r : index=$(yabai -m query --spaces --space | jq '.index'); yabai -m config --space ${index} layout float
